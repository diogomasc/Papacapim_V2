import React, { createContext, useState, useEffect, useContext } from "react";
import AsyncStorage from "@react-native-async-storage/async-storage";
import api from "../services/api";

// Contexto de autenticação
export const AuthContext = createContext({});

// Provedor de Autenticação
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Função para carregar dados do AsyncStorage na inicialização
  useEffect(() => {
    const loadStoredData = async () => {
      try {
        const storedUser = await AsyncStorage.getItem("user");
        const storedToken = await AsyncStorage.getItem("token");

        if (storedUser && storedToken) {
          setUser(JSON.parse(storedUser));
          api.defaults.headers["x-session-token"] = storedToken;
        }
      } catch (error) {
        console.error("Erro ao carregar dados armazenados:", error);
      } finally {
        setLoading(false);
      }
    };

    loadStoredData();
  }, []);

  // Função de login
  const signIn = async (login, password) => {
    try {
      const { data } = await api.post("/sessions", { login, password });
      setUser(data);
      api.defaults.headers["x-session-token"] = data.token;

      await AsyncStorage.setItem("user", JSON.stringify(data));
      await AsyncStorage.setItem("token", data.token);
    } catch (error) {
      console.error("Erro durante o login:", error);
      throw new Error("Falha no login. Por favor, tente novamente.");
    }
  };

  // Função de logout
  const signOut = async () => {
    try {
      await AsyncStorage.multiRemove(["user", "token"]);
      setUser(null);
    } catch (error) {
      console.error("Erro durante o logout:", error);
    }
  };

  // Função de registro de novo usuário
  const register = async (userData) => {
    try {
      const { data } = await api.post("/users", { user: userData });
      return data;
    } catch (error) {
      console.error("Erro durante o registro do usuário:", error);
      throw new Error("Falha no registro. Por favor, tente novamente.");
    }
  };

  // Função para atualizar o usuário atual
  const updateUser = async (userData) => {
    try {
      const { data } = await api.patch(`/users/${user.id}`, { user: userData });
      setUser(data);

      await AsyncStorage.setItem("user", JSON.stringify(data));
      return data;
    } catch (error) {
      console.error("Erro ao atualizar o usuário:", error);
      throw new Error("Falha na atualização. Por favor, tente novamente.");
    }
  };

  // Função para deletar o usuário atual
  const deleteUser = async () => {
    try {
      await api.delete(`/users/${user.id}`);
      await signOut();
    } catch (error) {
      console.error("Erro ao deletar o usuário:", error);
      throw new Error("Falha ao deletar. Por favor, tente novamente.");
    }
  };

  // Função para seguir um usuário
  const followUser = async (userLogin) => {
    try {
      const { data } = await api.post(`/users/${userLogin}/followers`);
      return data;
    } catch (error) {
      console.error("Erro ao seguir usuário:", error);
      throw new Error("Não foi possível seguir o usuário. Por favor, tente novamente.");
    }
  };

  // Função para deixar de seguir um usuário
  const unfollowUser = async (userLogin) => {
    try {
      await api.delete(`/users/${userLogin}/followers/${user.id}`);
    } catch (error) {
      console.error("Erro ao deixar de seguir usuário:", error);
      throw new Error("Não foi possível deixar de seguir o usuário. Por favor, tente novamente.");
    }
  };

  // Função para obter a lista de seguidores de um usuário
  const getFollowers = async (userLogin) => {
    try {
      const { data } = await api.get(`/users/${userLogin}/followers`);
      return data;
    } catch (error) {
      console.error("Erro ao obter seguidores:", error);
      throw new Error("Não foi possível obter os seguidores. Por favor, tente novamente.");
    }
  };

  return (
    <AuthContext.Provider
      value={{
        signed: !!user,
        user,
        loading,
        signIn,
        signOut,
        register,
        updateUser,
        deleteUser,
        followUser,
        unfollowUser,
        getFollowers,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

// Hook de contexto de autenticação
export const useAuth = () => {
  const context = useContext(AuthContext);

  if (!context) {
    throw new Error("useAuth deve ser usado dentro de um AuthProvider");
  }

  return context;
};
