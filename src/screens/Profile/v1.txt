import React, { useState, useEffect } from "react";
import { TouchableOpacity, Alert, ActivityIndicator, View } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useAuth } from "../../contexts/AuthContext";
import FollowersModal from "../../modals/FollowersModal";
import { Feather } from "@expo/vector-icons";
import api from "../../services/api";
import {
  Container,
  CloseButton,
  Header,
  Title,
  Subtitle,
  Info,
  FollowButton,
  FollowButtonText,
  FollowersContainer,
  FollowersInfo,
  FollowersLink,
} from "./styles";

const Profile = ({ route, navigation }) => {
  const { user: currentUser } = useAuth();
  const [userData, setUserData] = useState(null);
  const [isFollowing, setIsFollowing] = useState(false);
  const [followers, setFollowers] = useState([]);
  const [followButtonState, setFollowButtonState] = useState("Seguir");
  const [followersModalVisible, setFollowersModalVisible] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const { userData: routeUserData } = route.params || {};
    if (routeUserData) {
      setUserData(routeUserData);
      fetchFollowers(routeUserData.login);
      navigation.setOptions({
        drawerLockMode: "locked-closed",
        headerShown: false,
      });
    } else {
      console.error("ERRO - useEffect - userData ausente");
      setLoading(false);
    }
  }, [route.params]);

  const fetchFollowers = async (userLogin) => {
    if (!userLogin) {
      console.error("ERRO - fetchFollowers - Login de usuário não disponível.");
      setLoading(false);
      return;
    }

    try {
      const response = await api.get(`/users/${userLogin}/followers`);
      setFollowers(response.data || []);
      updateFollowState(response.data || []);
    } catch (error) {
      console.error("Erro ao buscar seguidores:", error);
      Alert.alert(
        "Erro",
        "Falha ao buscar dados dos seguidores. Tente novamente."
      );
    } finally {
      setLoading(false);
    }
  };

  // Função para atualizar o estado de seguir
  const updateFollowState = async (followersList) => {
    if (!userData?.login) {
      console.error(
        "ERRO - updateFollowState - Dados do usuário não disponíveis."
      );
      return;
    }

    try {
      const storedStatus = await AsyncStorage.getItem(
        `following_${userData.login}`
      );
      const isFollowingStored =
        storedStatus !== null ? JSON.parse(storedStatus) : false; // Verifica o estado armazenado

      console.log(
        "Status armazenado no AsyncStorage é:",
        isFollowingStored,
        "sobre o usuário:",
        userData.login
      );

      setIsFollowing(isFollowingStored); // Define o estado de seguir
      setFollowButtonState(isFollowingStored ? "Deixar de Seguir" : "Seguir"); // Atualiza o texto do botão

      // Verifica se o usuário está seguindo
      if (!isFollowingStored) {
        const isUserFollowing = followersList.some(
          (follower) => follower.follower_login === currentUser.login
        );
        setIsFollowing(isUserFollowing);
        setFollowButtonState(isUserFollowing ? "Deixar de Seguir" : "Seguir");
        await AsyncStorage.setItem(
          `following_${userData.login}`,
          JSON.stringify(isUserFollowing) // Armazena o novo estado
        );
      }
    } catch (error) {
      console.error(
        "ERRO - updateFollowState - Falha ao atualizar o estado de seguir:",
        error
      );
    }
  };

  // Função para seguir ou deixar de seguir um usuário
  const handleFollowUnfollow = async () => {
    if (!userData?.login) {
      Alert.alert("Erro", "Dados do usuário não disponíveis.");
      return;
    }

    try {
      const apiMethod = isFollowing ? api.delete : api.post; // Define o método da API
      const url = isFollowing
        ? `/users/${userData.login}/followers/${currentUser.id}` // Para deixar de seguir
        : `/users/${userData.login}/followers`; // Para seguir

      await apiMethod(url);
      setIsFollowing(!isFollowing); // Atualiza o estado de seguir
      setFollowButtonState(isFollowing ? "Seguir" : "Deixar de Seguir"); // Atualiza o texto do botão
      await AsyncStorage.setItem(
        `following_${userData.login}`,
        JSON.stringify(!isFollowing) // Armazena o novo estado
      );

      Alert.alert(
        "Sucesso",
        isFollowing
          ? "Você deixou de seguir o usuário."
          : "Você está seguindo o usuário."
      );
      fetchFollowers(userData.login);
    } catch (error) {
      console.error(
        "ERRO - handleFollowUnfollow - Falha ao seguir/deixar de seguir usuário:",
        error
      );
      if (error.response) {
        console.error("Dados da resposta:", error.response.data);
        console.error("Status da resposta:", error.response.status);
        console.error("Headers da resposta:", error.response.headers);
      }
      Alert.alert("Erro", "Falha ao atualizar o status. Tente novamente.");
    }
  };

  const handleOpenFollowersModal = () => {
    setFollowersModalVisible(true);
  };

  if (loading) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <ActivityIndicator size="large" color="#0000ff" />
      </View>
    );
  }

  if (!userData) return null;

  return (
    <Container>
      <CloseButton onPress={() => navigation.goBack()}>
        <Feather name="x" size={24} color="#2F80ED" />
      </CloseButton>
      <Header>
        <Title>{userData.name}</Title>
        <Subtitle>@{userData.login}</Subtitle>
        <Info>
          Usuário desde:{" "}
          {new Date(userData.created_at).toLocaleDateString("pt-BR")}
        </Info>
      </Header>

      {userData.login !== currentUser.login && (
        <FollowButton onPress={handleFollowUnfollow} isFollowing={isFollowing}>
          <FollowButtonText>{followButtonState}</FollowButtonText>
        </FollowButton>
      )}

      <FollowersContainer onPress={handleOpenFollowersModal}>
        <FollowersInfo>
          {followers.length}{" "}
          {followers.length === 1 ? "Seguidor" : "Seguidores"}
        </FollowersInfo>
        <FollowersLink>Ver todos os seguidores</FollowersLink>
      </FollowersContainer>

      <FollowersModal
        visible={followersModalVisible}
        onClose={() => setFollowersModalVisible(false)}
        followers={followers}
        userLogin={userData.login}
      />
    </Container>
  );
};

export default Profile;
