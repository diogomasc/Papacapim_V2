import React, { useState, useEffect } from "react";
import { TouchableOpacity, Alert, ActivityIndicator, View } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { useAuth } from "../../contexts/AuthContext";
import FollowersModal from "../../modals/FollowersModal";
import { Feather } from "@expo/vector-icons";
import api from "../../services/api";
import {
  Container,
  CloseButton,
  Header,
  Title,
  Subtitle,
  Info,
  FollowButton,
  FollowButtonText,
  FollowersContainer,
  FollowersInfo,
  FollowersLink,
} from "./styles";

const Profile = ({ route, navigation }) => {
  const { user: currentUser } = useAuth();
  const [userData, setUserData] = useState(null);
  const [isFollowing, setIsFollowing] = useState(false);
  const [followers, setFollowers] = useState([]);
  const [followButtonState, setFollowButtonState] = useState("Seguir");
  const [followersModalVisible, setFollowersModalVisible] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  // Defina fetchFollowers aqui, antes do useEffect
  const fetchFollowStatus = async () => {
    try {
      const response = await api.get(
        `/users/${userData.login}/followers/${currentUser.id}`
      );
      const isFollowingServer = response.status === 200;
      setIsFollowing(isFollowingServer);
      setFollowButtonState(isFollowingServer ? "Deixar de Seguir" : "Seguir");
      await AsyncStorage.setItem(
        `following_${userData.login}`,
        JSON.stringify(isFollowingServer)
      );
      console.log(
        `Status atualizado do servidor: ${
          isFollowingServer ? "Seguindo" : "Não seguindo"
        } ${userData.login}`
      );
    } catch (error) {
      if (error.response?.status === 404) {
        // 404 significa que não está seguindo
        setIsFollowing(false);
        setFollowButtonState("Seguir");
        await AsyncStorage.setItem(
          `following_${userData.login}`,
          JSON.stringify(false)
        );
        console.log(
          `Status atualizado do servidor: Não seguindo ${userData.login}`
        );
      } else {
        console.error("Erro ao buscar status de seguir:", error);
      }
    }
  };

  const fetchFollowers = async (userLogin) => {
    if (!userLogin) {
      console.error("ERRO - fetchFollowers - Login de usuário não disponível.");
      return;
    }

    try {
      const response = await api.get(`/users/${userLogin}/followers`);
      const followersList = response.data || [];
      setFollowers(followersList);

      // Ao invés de determinar o status aqui, vamos chamar fetchFollowStatus
      await fetchFollowStatus();
    } catch (error) {
      console.error("Erro ao buscar seguidores:", error);
      Alert.alert(
        "Erro",
        "Falha ao buscar dados dos seguidores. Tente novamente."
      );
    }
  };

  useEffect(() => {
    let isMounted = true;

    const loadUserData = async () => {
      try {
        setIsLoading(true);
        const { userData: routeUserData } = route.params || {};
        if (routeUserData && isMounted) {
          setUserData(routeUserData);
          await fetchFollowers(routeUserData.login);
          await fetchFollowStatus(); // Adicione esta linha
        } else if (isMounted) {
          console.error("ERRO - useEffect - userData ausente");
          Alert.alert("Erro", "Dados do usuário não disponíveis");
        }
      } catch (error) {
        console.error("Erro ao carregar dados do usuário:", error);
        if (isMounted) {
          Alert.alert(
            "Erro",
            "Falha ao carregar dados do usuário. Tente novamente."
          );
        }
      } finally {
        if (isMounted) {
          setIsLoading(false);
        }
      }
    };

    if (currentUser) {
      loadUserData();
    }

    return () => {
      isMounted = false;
    };
  }, [route.params, currentUser]);

  if (isLoading) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <ActivityIndicator size="large" color="#0000ff" />
      </View>
    );
  }

  // Função para atualizar o estado de seguir
  const updateFollowState = async (followersList) => {
    if (!userData?.login) {
      console.error(
        "ERRO - updateFollowState - Dados do usuário não disponíveis."
      );
      return;
    }

    try {
      const storedStatus = await AsyncStorage.getItem(
        `following_${userData.login}`
      );
      const isFollowingStored =
        storedStatus !== null ? JSON.parse(storedStatus) : false; // Verifica o estado armazenado

      console.log(
        "Status armazenado no AsyncStorage é:",
        isFollowingStored,
        "sobre o usuário:",
        userData.login
      );

      setIsFollowing(isFollowingStored); // Define o estado de seguir
      setFollowButtonState(isFollowingStored ? "Deixar de Seguir" : "Seguir"); // Atualiza o texto do botão

      // Verifica se o usuário está seguindo
      if (!isFollowingStored) {
        const isUserFollowing = followersList.some(
          (follower) => follower.follower_login === currentUser.login
        );
        setIsFollowing(isUserFollowing);
        setFollowButtonState(isUserFollowing ? "Deixar de Seguir" : "Seguir");
        await AsyncStorage.setItem(
          `following_${userData.login}`,
          JSON.stringify(isUserFollowing) // Armazena o novo estado
        );
      }
    } catch (error) {
      console.error(
        "ERRO - updateFollowState - Falha ao atualizar o estado de seguir:",
        error
      );
    }
  };

  // Função para seguir ou deixar de seguir um usuário
  const handleFollowUnfollow = async () => {
    if (!userData?.login) {
      Alert.alert("Erro", "Dados do usuário não disponíveis.");
      return;
    }

    try {
      const apiMethod = isFollowing ? api.delete : api.post;
      const url = isFollowing
        ? `/users/${userData.login}/followers/${currentUser.id}`
        : `/users/${userData.login}/followers`;

      await apiMethod(url);

      const newFollowingState = !isFollowing;
      setIsFollowing(newFollowingState);
      setFollowButtonState(newFollowingState ? "Deixar de Seguir" : "Seguir");

      await AsyncStorage.setItem(
        `following_${userData.login}`,
        JSON.stringify(newFollowingState)
      );

      console.log(
        `Status atualizado: ${
          newFollowingState ? "Seguindo" : "Não seguindo"
        } ${userData.login}`
      );

      // Atualiza a lista de seguidores
      await fetchFollowers(userData.login);
    } catch (error) {
      console.error("ERRO - handleFollowUnfollow:", error);
      if (error.response?.status === 422) {
        // Se receber 422, significa que o estado no servidor é diferente do que esperávamos
        // Vamos consultar o estado atual no servidor e atualizar localmente
        await fetchFollowStatus();
      } else {
        Alert.alert("Erro", "Falha ao atualizar o status. Tente novamente.");
      }
    }
  };

  // Função para abrir o modal de seguidores
  const handleOpenFollowersModal = () => {
    setFollowersModalVisible(true); // Define o estado do modal
  };

  if (!userData) return null; // Retorna nulo se os dados do usuário não estão disponíveis

  return (
    <Container>
      <CloseButton onPress={() => navigation.goBack()}>
        <Feather name="x" size={24} color="#2F80ED" />
      </CloseButton>
      <Header>
        <Title>{userData.name}</Title>
        <Subtitle>@{userData.login}</Subtitle>
        <Info>
          Usuário desde:{" "}
          {new Date(userData.created_at).toLocaleDateString("pt-BR")}
        </Info>
      </Header>

      {userData.login !== currentUser.login && (
        <FollowButton onPress={handleFollowUnfollow} isFollowing={isFollowing}>
          <FollowButtonText>{followButtonState}</FollowButtonText>
        </FollowButton>
      )}

      <FollowersContainer onPress={handleOpenFollowersModal}>
        <FollowersInfo>
          {followers.length}{" "}
          {followers.length === 1 ? "Seguidor" : "Seguidores"}
        </FollowersInfo>
        <FollowersLink>Ver todos os seguidores</FollowersLink>
      </FollowersContainer>

      <FollowersModal
        visible={followersModalVisible}
        onClose={() => setFollowersModalVisible(false)}
        followers={followers}
        userLogin={userData.login}
      />
    </Container>
  );
};

export default Profile;